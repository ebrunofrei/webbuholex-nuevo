// ============================================================
// üß† B√öHOLEX | Ruta unificada de Inteligencia Artificial (IA)
// ============================================================

import express from "express";
import chalk from "chalk";
import { callOpenAI } from "../services/openaiService.js";
import { obtenerHistorialUsuario, guardarHistorial } from "../services/memoryService.js";

const router = express.Router();

// ============================================================
// ‚öñÔ∏è Clasificaci√≥n autom√°tica de materias jur√≠dicas
// ============================================================

const materias = [
  { key: "civil", keywords: ["contrato", "obligaci√≥n", "propiedad", "arrendamiento", "posesi√≥n"] },
  { key: "penal", keywords: ["delito", "acusaci√≥n", "pena", "condena", "sentencia penal"] },
  { key: "laboral", keywords: ["trabajador", "empleador", "despido", "sindicato", "remuneraci√≥n"] },
  { key: "constitucional", keywords: ["derechos fundamentales", "amparo", "h√°beas corpus", "tribunal constitucional"] },
  { key: "administrativo", keywords: ["procedimiento administrativo", "SBN", "OSCE", "resoluci√≥n", "silencio administrativo"] },
  { key: "tributario", keywords: ["impuesto", "SUNAT", "tributo", "declaraci√≥n jurada", "arbitrios"] },
  { key: "comercial", keywords: ["sociedad an√≥nima", "empresa", "accionista", "factoring", "contrato mercantil"] },
  { key: "procesal", keywords: ["demanda", "apelaci√≥n", "casaci√≥n", "proceso judicial", "medida cautelar"] },
  { key: "internacional", keywords: ["corte interamericana", "tratado", "extradici√≥n", "derecho internacional"] },
  { key: "informatico", keywords: ["ciberseguridad", "protecci√≥n de datos", "h√°beas data", "delitos inform√°ticos"] },
];

// ============================================================
// üß© Ruta principal ‚Üí /api/ia/chat
// ============================================================

router.post("/chat", async (req, res) => {
  try {
    // ‚úÖ Verificaci√≥n temprana de entorno
    if (!process.env.OPENAI_API_KEY) {
      console.error(chalk.redBright("‚ùå Falta configurar OPENAI_API_KEY en el entorno del servidor."));
      return res.status(500).json({
        ok: false,
        error: "Falta configurar OPENAI_API_KEY en el entorno del servidor.",
      });
    }

    // üßæ Desestructurar cuerpo de la solicitud
    const {
      prompt,
      usuarioId = "invitado",
      expedienteId = "default",
      modo = "general",
      materia = "general",
      idioma = "es",
    } = req.body || {};

    if (!prompt || typeof prompt !== "string" || prompt.trim().length < 3) {
      return res.status(400).json({ ok: false, error: "Falta o es inv√°lido el prompt en la solicitud." });
    }

    // ============================================================
    // üß† Detecci√≥n autom√°tica de materia jur√≠dica
    // ============================================================

    let materiaDetectada = materia;
    const texto = prompt.toLowerCase();
    for (const m of materias) {
      if (m.keywords.some((k) => texto.includes(k))) {
        materiaDetectada = m.key;
        break;
      }
    }

    // ============================================================
    // üéØ System Prompt seg√∫n el modo
    // ============================================================

    let systemPrompt = "Eres un asistente jur√≠dico √∫til, emp√°tico y claro.";

    switch (modo) {
      case "juridico":
        systemPrompt = `Eres un abogado experto en derecho ${materiaDetectada}.
        Responde de manera profesional, basada en el Derecho peruano vigente, citando art√≠culos del C√≥digo Civil, Constituci√≥n, doctrina y jurisprudencia relevante.`;
        break;

      case "investigacion":
        systemPrompt = `Eres un investigador jur√≠dico acad√©mico.
        Ayuda a plantear hip√≥tesis, variables, objetivos y marcos te√≥ricos de investigaciones jur√≠dicas.`;
        break;

      default:
        systemPrompt = `Eres LitisBot, asistente jur√≠dico de B√∫hoLex.
        Brinda informaci√≥n general, consejos legales y orientaci√≥n clara sin reemplazar la asesor√≠a de un abogado.`;
        break;
    }

    // ============================================================
    // üí¨ Construcci√≥n de contexto conversacional
    // ============================================================

    const historialPrevio = await obtenerHistorialUsuario(usuarioId, expedienteId);

    const messages = [
      { role: "system", content: systemPrompt },
      ...historialPrevio.flatMap((h) => [
        { role: "user", content: h.pregunta },
        { role: "assistant", content: h.respuesta },
      ]),
      { role: "user", content: prompt },
    ];

    console.log(chalk.cyanBright(`üì® [IA] Solicitando respuesta ‚Üí modo:${modo} | materia:${materiaDetectada}`));

    // ============================================================
    // ü§ñ Llamada a OpenAI (v√≠a servicio)
    // ============================================================

    const respuesta = await callOpenAI(messages, {
      model: "gpt-4o-mini",
      max_tokens: 1200,
      temperature: modo === "juridico" ? 0.3 : 0.7,
    });

    // ============================================================
    // üíæ Guardar historial en memoria o base de datos
    // ============================================================

    await guardarHistorial(usuarioId, expedienteId, prompt, respuesta);

    console.log(chalk.greenBright(`‚úÖ [IA] Respuesta generada correctamente (${respuesta.length} caracteres)`));

    // ============================================================
    // üì§ Enviar respuesta al cliente
    // ============================================================

    return res.json({
      ok: true,
      respuesta,
      modoDetectado: modo,
      materiaDetectada,
      idioma,
    });
  } catch (err) {
    console.error(chalk.redBright("‚ùå Error interno en /api/ia/chat:"), err.message);
    return res.status(500).json({
      ok: false,
      error: err.message || "Error interno del servicio de IA.",
    });
  }
});

// ============================================================
// üß™ Ruta de prueba directa para OpenAI (debug opcional)
// ============================================================

router.get("/test", async (_req, res) => {
  try {
    console.log(chalk.yellow("üß† Ejecutando prueba directa de OpenAI..."));
    const messages = [
      { role: "system", content: "Eres LitisBot, asistente jur√≠dico de B√∫hoLex." },
      { role: "user", content: "Expl√≠came brevemente qu√© es el C√≥digo Civil peruano." },
    ];

    const respuesta = await callOpenAI(messages, {
      model: "gpt-4o-mini",
      temperature: 0.6,
      max_tokens: 200,
    });

    return res.json({ ok: true, respuesta });
  } catch (err) {
    console.error(chalk.red(`‚ùå Error en /api/ia/test: ${err.message}`));
    return res.status(500).json({ ok: false, error: err.message });
  }
});

export default router;
