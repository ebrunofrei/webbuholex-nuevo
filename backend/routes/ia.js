// ============================================================
// ü¶â B√öHOLEX | Ruta unificada de Inteligencia Artificial (IA)
// ------------------------------------------------------------
// Capacidades principales:
//  - Redacci√≥n de documentos (judiciales, administrativos, privados,
//    corporativos, cartas notariales, contratos, descargos, etc.)
//  - An√°lisis de motivaci√≥n judicial / administrativa
//    (debido proceso, motivaci√≥n suficiente vs aparente, proporcionalidad)
//  - Traducci√≥n / interpretaci√≥n jur√≠dica multiling√ºe (es-PE, qu-PE, ay-BO...)
//  - Orientaci√≥n legal pr√°ctica con pasos accionables
//
// Persistencia:
//  - Conversaci√≥n y contexto se guardan en MongoDB por usuario + expediente.
//  - Cada turno queda trazable (auditor√≠a legal).
//
// Seguridad / econom√≠a:
//  - Limitamos tama√±o del prompt recibido (anti bomba de texto infinita).
// ============================================================

import express from "express";
import chalk from "chalk";
import { callOpenAI } from "../services/openaiService.js";
import {
  obtenerHistorialUsuario,
  guardarHistorial,
} from "../services/memoryService.js";

const router = express.Router();

/* ------------------------------------------------------------
   ‚öñÔ∏è Clasificaci√≥n autom√°tica de materias jur√≠dicas (r√°pida)
   (sirve para etiquetar la conversaci√≥n y para analytics)
------------------------------------------------------------ */
const materias = [
  { key: "civil", keywords: ["contrato", "obligaci√≥n", "obligacion", "propiedad", "arrendamiento", "posesi√≥n", "posesion", "familia", "sucesi√≥n", "sucesion"] },
  { key: "penal", keywords: ["delito", "acusaci√≥n", "acusacion", "pena", "condena", "sentencia penal", "procesado"] },
  { key: "laboral", keywords: ["trabajador", "empleador", "despido", "sindicato", "remuneraci√≥n", "remuneracion", "planilla"] },
  { key: "constitucional", keywords: ["derechos fundamentales", "amparo", "h√°beas corpus", "habeas corpus", "tribunal constitucional"] },
  { key: "administrativo", keywords: ["procedimiento administrativo", "osce", "silencio administrativo", "resoluci√≥n administrativa", "resolucion administrativa", "tupa", "sunafil", "municipalidad"] },
  { key: "tributario", keywords: ["impuesto", "sunat", "tributo", "declaraci√≥n jurada", "declaracion jurada", "arbitrios"] },
  { key: "comercial", keywords: ["sociedad", "empresa", "accionista", "factoring", "contrato mercantil", "acreedor", "deudor comercial"] },
  { key: "procesal", keywords: ["demanda", "apelaci√≥n", "apelacion", "casaci√≥n", "casacion", "proceso judicial", "medida cautelar"] },
  { key: "internacional", keywords: ["corte interamericana", "tratado", "extradici√≥n", "extradicion", "derecho internacional"] },
  { key: "informatico", keywords: ["ciberseguridad", "protecci√≥n de datos", "proteccion de datos", "h√°beas data", "habeas data", "delitos inform√°ticos", "delitos informaticos", "informatico"] },
];

/* ------------------------------------------------------------
   üéØ Clasificador de intenci√≥n (documentos / an√°lisis / traducci√≥n / general)
   Si el usuario pide "redacta", vamos a modo documento.
   Si pide "analiza si est√° bien motivada", vamos a modo an√°lisis procesal.
   Etc.
------------------------------------------------------------ */
function clasificarIntencion(textoRaw = "") {
  const t = (textoRaw || "").toLowerCase();

  // Traducci√≥n / interpretaci√≥n
  if (
    t.includes("traduce") || t.includes("trad√∫ceme") || t.includes("traduceme") || t.includes("traducir") ||
    t.includes("explica en quechua") || t.includes("explica en aimara") ||
    t.includes("dime en ingl√©s") || t.includes("dime en ingles") ||
    t.includes("en portugu√©s") || t.includes("en portugues") ||
    t.includes("trad√∫celo") || t.includes("traducelo")
  ) {
    return "traduccion";
  }

  // Redacci√≥n de documentos (judicial / administrativo / privado / corporativo)
  if (
    t.includes("redacta") || t.includes("red√°ctame") || t.includes("redactame") ||
    t.includes("elabora") || t.includes("escribe") ||
    t.includes("modelo de") || t.includes("formato de") || t.includes("plantilla de") || t.includes("minuta de") ||
    t.includes("recurso de apelaci√≥n") || t.includes("recurso de apelacion") ||
    t.includes("demanda") || t.includes("carta notarial") ||
    t.includes("informe jur√≠dico") || t.includes("informe juridico") ||
    t.includes("informe legal") || t.includes("oficio") ||
    t.includes("descargo administrativo") || t.includes("reclamo administrativo") ||
    t.includes("contrato")
  ) {
    return "redaccion";
  }

  // An√°lisis jur√≠dico / motivaci√≥n / debido proceso
  if (
    t.includes("analiza esta resoluci√≥n") || t.includes("analiza esta resolucion") ||
    t.includes("analiza esta sentencia") ||
    t.includes("est√° bien motivada") || t.includes("esta bien motivada") ||
    t.includes("motivaci√≥n suficiente") || t.includes("motivacion suficiente") ||
    t.includes("motivaci√≥n aparente") || t.includes("motivacion aparente") ||
    t.includes("vulneraci√≥n del debido proceso") || t.includes("vulneracion del debido proceso") ||
    t.includes("incongruencia procesal") ||
    t.includes("proporcionalidad de la medida") ||
    t.includes("arbitrariedad del juez") || t.includes("acto arbitrario")
  ) {
    return "analisis_juridico";
  }

  return "consulta_general";
}

/* ------------------------------------------------------------
   üß± Prompts especializados seg√∫n intenci√≥n detectada
   Estos prompts definen el "rol mental" del modelo.
------------------------------------------------------------ */

function promptRedaccion({ idioma, pais }) {
  return `
Eres LitisBot, asistente jur√≠dico y documentalista profesional.

TU TAREA:
- Redactar documentos formales completos seg√∫n lo que pida el usuario.
- Puedes generar: demandas, escritos judiciales, recursos impugnatorios,
  descargos administrativos, cartas notariales, contratos civiles o laborales,
  comunicaciones corporativas, cartas simples, correos formales,
  informes jur√≠dicos y t√©cnicos, etc.
- Emplea estructura real (encabezado, fundamentos, petitorio/solicitud,
  cierre, anexos si aplica).
- Si faltan datos, usa [CORCHETES] (p. ej. [NOMBRE], [DNI], [MONTO], [FECHA]).
- Adapta al pa√≠s base ${pais} salvo que el usuario indique otro.
- Al final agrega SIEMPRE:
  "Este es un borrador inicial que debe ser revisado o adaptado por un profesional
   antes de su presentaci√≥n oficial."

LENGUAJE DE SALIDA: ${idioma}.
Tono formal, claro y profesional, acorde al tipo de documento.
`.trim();
}

function promptAnalisisJuridico({ idioma, pais }) {
  return `
Eres LitisBot, analista jur√≠dico procesal.

Analiza la validez y motivaci√≥n de actos judiciales o administrativos:
- ¬øHay motivaci√≥n f√°ctica y jur√≠dica? ¬øEs suficiente o solo aparente?
- ¬øExiste congruencia entre lo pedido y lo resuelto?
- ¬øLa medida es razonable, proporcional y fundamentada?
- ¬øSe respet√≥ el debido proceso y el derecho de defensa?
- ¬øHay riesgos de arbitrariedad, incongruencia procesal, incompetencia o
  incumplimiento de plazos?

Estructura tu respuesta en:
1) Resumen del acto.
2) Fortalezas.
3) Debilidades / posibles vicios.
4) Argumentos de defensa / impugnaci√≥n sugeridos.
5) Riesgos.

No prometas resultados, habla en t√©rminos de "podr√≠a argumentarse que..."
y "es posible cuestionar...".

Pa√≠s base: ${pais}.
Responde en: ${idioma}, t√©cnico pero claro para un usuario humano.
`.trim();
}

function promptTraduccion({ idioma, pais }) {
  return `
Eres LitisBot, int√©rprete legal multiling√ºe.

Traduce o explica el contenido legal al idioma solicitado con respeto cultural:
- Mant√©n el sentido jur√≠dico sin distorsionar.
- En lenguas originarias (quechua, aimara) usa un registro digno y claro,
  evita caricaturizar o infantilizar.
- En ingl√©s/portugu√©s, mant√©n tono formal entendible por no abogados.
- Si el concepto es complejo, da ejemplos pr√°cticos.

Contexto legal base: ${pais}.
Responde en: ${idioma}.
`.trim();
}

function promptGeneral({ idioma, pais }) {
  return `
Eres LitisBot, asesor legal pr√°ctico.

Objetivo:
- Orientar al usuario sobre su situaci√≥n legal, administrativa,
  contractual o laboral.
- Indicar pasos concretos (plazos, ante qu√© entidad ir, qu√© pedir,
  qu√© documento presentar).
- Explicar riesgos y v√≠as de defensa.
- Si parece urgente, sugiere asistencia presencial.
- No prometas resultados; habla en t√©rminos de opciones y estrategias.

Pa√≠s base: ${pais}.
Responde en: ${idioma}, claro y emp√°tico.
`.trim();
}

function buildSystemPrompt({ intencion, idioma, pais }) {
  switch (intencion) {
    case "redaccion":
      return promptRedaccion({ idioma, pais });

    case "analisis_juridico":
      return promptAnalisisJuridico({ idioma, pais });

    case "traduccion":
      return promptTraduccion({ idioma, pais });

    case "consulta_general":
    default:
      return promptGeneral({ idioma, pais });
  }
}

/* ------------------------------------------------------------
   üîí Helper de saneamiento de prompt de usuario
   - Evita que nos manden 200k caracteres y nos fundan la API.
------------------------------------------------------------ */
function limpiarPromptUsuario(str = "") {
  if (!str || typeof str !== "string") return "";
  // limpiamos espacios absurdos pero SIN alterar contenido legal
  const base = str.replace(/\s+\n/g, "\n").replace(/\n{3,}/g, "\n\n").trim();
  // l√≠mite duro para proteger costos (ajustable)
  return base.slice(0, 8000);
}

/* ------------------------------------------------------------
   üß© Ruta principal ‚Üí /api/ia/chat
------------------------------------------------------------ */
router.post("/chat", async (req, res) => {
  try {
    // ‚úÖ Verificaci√≥n temprana de entorno
    if (!process.env.OPENAI_API_KEY) {
      console.error(
        chalk.redBright("‚ùå Falta configurar OPENAI_API_KEY en el entorno del servidor.")
      );
      return res.status(500).json({
        ok: false,
        error: "Falta configurar OPENAI_API_KEY en el entorno del servidor.",
      });
    }

    // üßæ Cuerpo de la solicitud desde el frontend
    const {
      prompt,
      usuarioId = "invitado",
      expedienteId = "default",

      // contexto cultural / ling√º√≠stico
      idioma = "es-PE",   // "es-PE", "qu-PE", "ay-BO", "en-US", "pt-BR"
      pais = "Per√∫",      // Pa√≠s base para an√°lisis normativo

      // compat legado con tu front
      modo = "general",
      materia = "general",
    } = req.body || {};

    // üßº Sanitizar entrada
    const userPromptLimpio = limpiarPromptUsuario(prompt);

    if (!userPromptLimpio || userPromptLimpio.length < 3) {
      return res.status(400).json({
        ok: false,
        error: "Falta o es inv√°lido el prompt en la solicitud.",
      });
    }

    // ============================================================
    // üß† Detecci√≥n autom√°tica de materia (etiqueta tem√°tica)
    // ============================================================
    let materiaDetectada = materia;
    {
      const texto = userPromptLimpio.toLowerCase();
      for (const m of materias) {
        if (m.keywords.some((k) => texto.includes(k))) {
          materiaDetectada = m.key;
          break;
        }
      }
    }

    // ============================================================
    // üéØ Intenci√≥n global de la consulta
    // ============================================================
    const intencion = clasificarIntencion(userPromptLimpio);

    // ============================================================
    // üß± Prompt "system" especializado seg√∫n intenci√≥n
    // ============================================================
    const systemPrompt = buildSystemPrompt({ intencion, idioma, pais });

    // ============================================================
    // üí¨ Contexto conversacional desde MongoDB
    //    IMPORTANTE: ahora obtenerHistorialUsuario() ya devuelve
    //    [{role:"user",content:"..."}, {role:"assistant",content:"..."}...]
    //    en orden cronol√≥gico.
    // ============================================================
    const historialPrevio = await obtenerHistorialUsuario(
      usuarioId,
      expedienteId
    );

    // Construimos el payload final para el modelo:
    //  - systemPrompt va primero
    //  - luego todo el historial previo
    //  - √∫ltimo el mensaje limpio actual del usuario
    const messages = [
      { role: "system", content: systemPrompt },
      ...historialPrevio,
      { role: "user", content: userPromptLimpio },
    ];

    console.log(
      chalk.cyanBright(
        `üì® [IA] Solicitud ‚Üí intencion:${intencion} | materia:${materiaDetectada} | idioma:${idioma} | pais:${pais} | usuario:${usuarioId} | expediente:${expedienteId}`
      )
    );

    // ============================================================
    // ü§ñ Llamada a OpenAI v√≠a servicio interno
    //    Ajustamos temperatura seg√∫n intenci√≥n:
    //    - Redacci√≥n de documento formal -> baja creatividad
    //    - An√°lisis jur√≠dico -> tambi√©n bajo
    //    - General / traducci√≥n -> un poco m√°s flexible
    // ============================================================
    const temperatura =
      intencion === "redaccion"
        ? 0.4 // documento formal, voz seria
        : intencion === "analisis_juridico"
        ? 0.5 // an√°lisis t√©cnico, controlado
        : 0.6; // general / traducci√≥n, m√°s natural

    const respuesta = await callOpenAI(messages, {
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      max_tokens: 1400,
      temperature: temperatura,
    });

    // ============================================================
    // üíæ Guardar historial en MongoDB
    //    Guardamos tanto la pregunta como la respuesta,
    //    junto con metadata que nos sirve para auditor√≠a
    //    y para el contexto futuro (idioma, pa√≠s, materia, intenci√≥n).
    // ============================================================
    await guardarHistorial(usuarioId, expedienteId, userPromptLimpio, respuesta, {
      intencion,
      materiaDetectada,
      idioma,
      pais,
    });

    // ============================================================
    // üí° Sugerencias din√°micas para el frontend
    //    Estas se pueden mostrar como chips/botones bajo la respuesta.
    // ============================================================
    let sugerencias = [];
    if (intencion === "redaccion") {
      sugerencias = [
        "¬øIncluyo fundamentos legales espec√≠ficos o jurisprudencia?",
        "¬øQuieres la versi√≥n lista para presentar ante una autoridad?",
        "¬øDeseas traducir este documento a otro idioma?",
      ];
    } else if (intencion === "analisis_juridico") {
      sugerencias = [
        "¬øQuieres que redacte un recurso basado en este an√°lisis?",
        "¬øPrefieres un resumen para explicarlo a tu cliente?",
        "¬øIdentifico riesgos procesales clave?",
      ];
    } else if (intencion === "traduccion") {
      sugerencias = [
        "¬øDeseas la versi√≥n formal para autoridad?",
        "¬øNecesitas una explicaci√≥n m√°s simple para familiares?",
        "¬øRedacto una carta/solicitud basada en esto?",
      ];
    } else {
      sugerencias = [
        "¬øQuieres que te redacte un documento formal listo para copiar?",
        "¬øDeseas que analice si hay vicios en una resoluci√≥n?",
        "¬øQuieres que lo traduzca a otro idioma?",
      ];
    }

    console.log(
      chalk.greenBright(
        `‚úÖ [IA] Respuesta OK (${respuesta?.length || 0} chars) ‚Äî intenci√≥n:${intencion}`
      )
    );

    // ============================================================
    // üì§ Respuesta final al frontend
    // ============================================================
    return res.json({
      ok: true,
      respuesta,          // texto final para mostrar en la burbuja del bot
      intencion,          // "redaccion", "analisis_juridico", etc.
      modoDetectado: modo, // compat legacy
      materiaDetectada,   // "civil", "laboral", etc.
      idioma,             // "es-PE" / "qu-PE" etc.
      pais,               // "Per√∫"
      sugerencias,        // array de strings para UI
    });
  } catch (err) {
    console.error(chalk.redBright("‚ùå Error interno en /api/ia/chat:"), err);

    return res.status(500).json({
      ok: false,
      error: err?.message || "Error interno del servicio de IA.",
    });
  }
});

/* ------------------------------------------------------------
   üß™ Ruta de prueba /api/ia/test (debug interno)
   √ötil para probar conectividad con OpenAI sin pasar por el front.
------------------------------------------------------------ */
router.get("/test", async (_req, res) => {
  try {
    console.log(chalk.yellow("üß† Ejecutando prueba directa de OpenAI..."));

    const messages = [
      {
        role: "system",
        content:
          "Eres LitisBot, asistente jur√≠dico de B√∫hoLex. Responde breve y claro.",
      },
      {
        role: "user",
        content: "¬øQu√© es la conciliaci√≥n extrajudicial en Per√∫?",
      },
    ];

    const respuesta = await callOpenAI(messages, {
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      temperature: 0.6,
      max_tokens: 200,
    });

    return res.json({ ok: true, respuesta });
  } catch (err) {
    console.error(chalk.red(`‚ùå Error en /api/ia/test: ${err.message}`));
    return res.status(500).json({ ok: false, error: err.message });
  }
});

export default router;
